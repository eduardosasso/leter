gzip on;

root /usr/share/nginx/html;
error_page 404 /404.html;

server {
  listen 80;
  return 301 https://$host$request_uri;
}

server {
  listen 443 ssl;
  server_name "~^www\.(.*)$" ;
  return 301 https://$1$request_uri;
}

upstream rails_app {
  # TODO figure out network between dockers on different machines
  server admin:3000;
}

# TODO DRY/reuse server block
# TODO serve assets from nginx
server {
  listen 443 ssl;

  server_name admin.leter.test;

  location / {
    try_files $uri @rails;
  }

  location @rails {
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Port $server_port;
    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header Host $http_host;
    proxy_redirect off;
    proxy_pass http://rails_app;
  }

  ssl on;
  ssl_certificate /etc/nginx/conf.d/ssl/local_ssl.crt;
  ssl_certificate_key /etc/nginx/conf.d/ssl/local_ssl.key;
}


server {
  listen 443 ssl;

  server_name leter.test;
  server_name ~^(?<user>.+)\.leter.test$;

  ssl on;
  ssl_certificate /etc/nginx/conf.d/ssl/local_ssl.crt;
  ssl_certificate_key /etc/nginx/conf.d/ssl/local_ssl.key;
}


server {
  listen 443 ssl default_server;

  server_name _; #default catch all
  server_name ~^(?<user>.+)\.leter\.co$;

  ssl on;
  ssl_certificate /etc/nginx/conf.d/ssl/cert.pem;
  ssl_certificate_key /etc/nginx/conf.d/ssl/key.pem;
}

index $user.html $host.html index.html;
